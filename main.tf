# AWS Provider Configuration
provider "aws" {
  region = var.aws_region
}

# Enable Amazon Inspector
resource "aws_inspector2_organization_configuration" "inspector" {
  auto_enable = {
    ec2    = true
    ecr    = true
    lambda = false
  }
}

# IAM Role for EC2 Instance
resource "aws_iam_role" "ec2_role" {
  name = var.ec2_role_name
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Effect    = "Allow"
      Principal = { Service = "ec2.amazonaws.com" }
      Action    = "sts:AssumeRole"
    }]
  })
}

# Attach Policies to EC2 Role
resource "aws_iam_role_policy_attachment" "ec2_ssm_policy" {
  role       = aws_iam_role.ec2_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
}

# IAM Instance Profile for EC2
resource "aws_iam_instance_profile" "ec2_profile" {
  name = var.ec2_role_name
  role = aws_iam_role.ec2_role.name
}

# EC2 Instance
resource "aws_instance" "web_server" {
  ami                    = var.ec2_ami_id
  instance_type          = var.ec2_instance_type
  iam_instance_profile   = aws_iam_instance_profile.ec2_profile.name
  associate_public_ip_address = true

  user_data = <<-EOF
              #!/bin/bash
              sudo yum install -y amazon-ssm-agent
              sudo systemctl enable amazon-ssm-agent
              sudo systemctl start amazon-ssm-agent
              EOF

  tags = {
    Name = "InspectorDemoInstance"
  }
}

# ECR Repository
resource "aws_ecr_repository" "app_repo" {
  name = var.ecr_repository_name
  image_scanning_configuration {
    scan_on_push = true
  }
}

# IAM Role for SSM Automation
resource "aws_iam_role" "ssm_role" {
  name = var.ssm_role_name
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Effect    = "Allow"
      Principal = { Service = "ssm.amazonaws.com" }
      Action    = "sts:AssumeRole"
    }]
  })
}

# Attach Policies to SSM Role
resource "aws_iam_role_policy_attachment" "ssm_automation_policy" {
  role       = aws_iam_role.ssm_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMAutomationRole"
}

# SSM Automation Document for Remediation
resource "aws_ssm_document" "remediation_doc" {
  name          = var.ssm_document_name
  document_type = "Automation"

  content = jsonencode({
    schemaVersion = "0.3"
    description   = "Remediation document to patch EC2 instances"
    mainSteps     = [{
      action      = "aws:runCommand"
      name        = "RunPatch"
      inputs      = {
        DocumentName = "AWS-RunPatchBaseline"
        InstanceIds  = ["{{ InstanceId }}"]
      }
    }]
  })
}

# IAM Role for EventBridge to Invoke SSM
resource "aws_iam_role" "eventbridge_role" {
  name = var.eventbridge_role_name
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Effect    = "Allow"
      Principal = { Service = "events.amazonaws.com" }
      Action    = "sts:AssumeRole"
    }]
  })
}

# Attach Policies to EventBridge Role
resource "aws_iam_role_policy_attachment" "eventbridge_ssm_policy" {
  role       = aws_iam_role.eventbridge_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole"
}

# EventBridge Rule for Inspector Findings
resource "aws_cloudwatch_event_rule" "inspector_finding_rule" {
  name = "InspectorFindingRule"

  event_pattern = jsonencode({
    source       = ["aws.inspector2"]
    "detail-type" = ["Inspector2 Finding"]
    detail       = {
      severity = [{ "equals": ["CRITICAL", "HIGH"] }]
    }
  })
}

# EventBridge Target to Trigger SSM Automation
resource "aws_cloudwatch_event_target" "ssm_automation_target" {
  rule = aws_cloudwatch_event_rule.inspector_finding_rule.name
  arn  = aws_ssm_document.remediation_doc.arn
  role_arn = aws_iam_role.eventbridge_role.arn

  input_transformer {
    input_paths = {
      "InstanceId" : "$.detail.resources[0].id"
    }
    input_template = "{\"InstanceId\":\"<InstanceId>\"}"
  }
}

# Permissions for SSM Document Invocation
resource "aws_ssm_association" "ssm_association" {
  name       = aws_ssm_document.remediation_doc.name
  targets    = []
  wait_for_success_timeout_seconds = 0
}

