# main.tf

provider "aws" {
  region = var.aws_region
}

# Retrieve the current AWS account ID
data "aws_caller_identity" "current" {}

# Enable Amazon Inspector for EC2 and ECR
resource "aws_inspector2_enabler" "enable_inspector" {
  account_ids    = [data.aws_caller_identity.current.account_id]
  resource_types = ["EC2", "ECR"]
}

# Create an IAM role for EC2 instances to communicate with SSM
data "aws_iam_policy_document" "ec2_assume_role_policy" {
  statement {
    effect = "Allow"

    principals {
      type        = "Service"
      identifiers = ["ec2.amazonaws.com"]
    }

    actions = ["sts:AssumeRole"]
  }
}

resource "aws_iam_role" "ec2_ssm_role" {
  name               = "EC2SSMRole"
  assume_role_policy = data.aws_iam_policy_document.ec2_assume_role_policy.json
}

resource "aws_iam_role_policy_attachment" "ec2_ssm_role_policy_attachment" {
  role       = aws_iam_role.ec2_ssm_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
}

resource "aws_iam_instance_profile" "ec2_instance_profile" {
  name = "EC2InstanceProfile"
  role = aws_iam_role.ec2_ssm_role.name
}

# Create an ECR repository
resource "aws_ecr_repository" "app_repository" {
  name = "app-repo"
}

# Define the SSM Document for remediation
resource "aws_ssm_document" "remediation_document" {
  name          = "RemediationDocument"
  document_type = "Automation"
  content       = <<EOF
{
  "schemaVersion": "0.3",
  "description": "Patch EC2 instances to remediate vulnerabilities.",
  "parameters": {},
  "mainSteps": [
    {
      "action": "aws:runCommand",
      "name": "PatchInstances",
      "inputs": {
        "DocumentName": "AWS-RunPatchBaseline",
        "Parameters": {
          "Operation": ["Install"]
        }
      }
    }
  ]
}
EOF
}

# Create an IAM role for SSM Automation
data "aws_iam_policy_document" "ssm_assume_role_policy" {
  statement {
    effect = "Allow"

    principals {
      type        = "Service"
      identifiers = ["ssm.amazonaws.com"]
    }

    actions = ["sts:AssumeRole"]
  }
}

resource "aws_iam_role" "ssm_automation_role" {
  name               = "SSMAutomationRole"
  assume_role_policy = data.aws_iam_policy_document.ssm_assume_role_policy.json
}

resource "aws_iam_role_policy_attachment" "ssm_automation_role_policy_attachment" {
  role       = aws_iam_role.ssm_automation_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole"
}

# Create an EventBridge rule to trigger the SSM Automation document on Inspector findings
resource "aws_cloudwatch_event_rule" "inspector_finding_rule" {
  name        = "InspectorFindingRule"
  description = "Triggers SSM Automation on Amazon Inspector findings."
  event_pattern = <<EOF
{
  "source": ["aws.inspector2"],
  "detail-type": ["Inspector2 Finding"],
  "detail": {
    "severity": {
      "label": ["CRITICAL", "HIGH"]
    }
  }
}
EOF
}

# Create an IAM role for EventBridge to invoke SSM
data "aws_iam_policy_document" "eventbridge_assume_role_policy" {
  statement {
    effect = "Allow"

    principals {
      type        = "Service"
      identifiers = ["events.amazonaws.com"]
    }

    actions = ["sts:AssumeRole"]
  }
}

resource "aws_iam_role" "eventbridge_invoke_ssm_role" {
  name               = "EventBridgeInvokeSSMRole"
  assume_role_policy = data.aws_iam_policy_document.eventbridge_assume_role_policy.json
}

data "aws_iam_policy_document" "eventbridge_invoke_ssm_policy" {
  statement {
    effect = "Allow"
    actions = [
      "ssm:StartAutomationExecution"
    ]
    resources = ["*"]
  }
}

resource "aws_iam_role_policy" "eventbridge_invoke_ssm_role_policy" {
  name   = "EventBridgeInvokeSSMPolicy"
  role   = aws_iam_role.eventbridge_invoke_ssm_role.id
  policy = data.aws_iam_policy_document.eventbridge_invoke_ssm_policy.json
}

# Attach the SSM Automation document as a target for the EventBridge rule
resource "aws_cloudwatch_event_target" "ssm_automation_target" {
  rule      = aws_cloudwatch_event_rule.inspector_finding_rule.name
  target_id = "SSMAutomationTarget"
  arn       = aws_ssm_document.remediation_document.arn
  role_arn  = aws_iam_role.eventbridge_invoke_ssm_role.arn

  input = <<EOF
{
  "InstanceIds": ["${aws_instance.app_server.id}"]
}
EOF
}

# Allow EventBridge to invoke the SSM Automation document
resource "aws_ssm_permission" "allow_eventbridge" {
  type        = "Automation"
  account_ids = [data.aws_caller_identity.current.account_id]
  shared_document_version = "$DEFAULT"
  name        = aws_ssm_document.remediation_document.name
}

# Create a security group for the EC2 instance
resource "aws_security_group" "ec2_security_group" {
  name        = "EC2SecurityGroup"
  description = "Allow SSH access to EC2 instances."
  vpc_id      = data.aws_vpc.default.id

  ingress {
    description = "SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] # Adjust for your security requirements
  }

  egress {
    description = "Allow all outbound traffic."
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Fetch the default VPC and its subnets
data "aws_vpc" "default" {
  default = true
}

data "aws_subnet_ids" "default" {
  vpc_id = data.aws_vpc.default.id
}

# Launch an EC2 instance with the SSM role
resource "aws_instance" "app_server" {
  ami                    = var.ami_id
  instance_type          = var.instance_type
  subnet_id              = data.aws_subnet_ids.default.ids[0]
  vpc_security_group_ids = [aws_security_group.ec2_security_group.id]
  key_name               = var.key_pair_name
  iam_instance_profile   = aws_iam_instance_profile.ec2_instance_profile.name

  tags = {
    Name = "AppServer"
  }
}

# Output the instance ID and public IP
output "instance_id" {
  value = aws_instance.app_server.id
}

output "instance_public_ip" {
  value = aws_instance.app_server.public_ip
}

# Output the ECR repository URL
output "ecr_repository_url" {
  value = aws_ecr_repository.app_repository.repository_url
}
